<?xml version="1.0" encoding="UTF-8"?>

<!-- ************************************************** -->
<!-- Sphinx-4 Configuration File                        -->
<!-- ************************************************** -->


<config>

  <!-- ************************************************** -->
  <!-- Global Properties                                  -->
  <!-- ************************************************** -->

  <property name="logLevel" value="WARNING"/>
  
  <property name="absoluteBeamWidth" value="50000"/>
  <property name="relativeBeamWidth" value="1E-120"/>
  <property name="absoluteWordBeamWidth" value="-1"/>
  <property name="relativeWordBeamWidth" value="1E-40"/>
  <property name="wordInsertionProbability" value="0.1"/>
  <property name="languageWeight" value="12"/>
  <property name="silenceInsertionProbability" value=".1"/>
  <property name="fillerInsertionProbability" value="1e-2"/>
  <property name="outOfGrammarProbability" value="1E-1"/>
  <property name="acousticLookahead" value="0"/>
  <property name="lookaheadBeam" value="1e-80"/>
  <property name="speechClassThreshold" value="20.0"/>
  <property name="frontend" value="mfcFrontEnd"/>
  <property name="recognizer" value="recognizer"/>

  <!-- ************************************************** -->
  <!-- Components                                         -->
  <!-- ************************************************** -->

  <component name="recognizer"
             type="edu.cmu.sphinx.recognizer.Recognizer">
    <property name="decoder" value="decoder"/>
    <propertylist name="monitors">
      <item>accuracyTracker</item>
      <item>speedTracker</item>
      <item>memoryTracker</item>
    </propertylist>
  </component>

  <component name="decoder"
             type="edu.cmu.sphinx.decoder.Decoder">
    <property name="searchManager" value="wordPruningSearchManager"/>
  </component>

  <component name="wordPruningSearchManager"
             type="edu.cmu.sphinx.decoder.search.WordPruningBreadthFirstSearchManager">
    <property name="scorer" value="threadedScorer"/>
    <property name="pruner" value="trivialPruner"/>
    <property name="activeListManager" value="activeListManager"/>
    <property name="buildWordLattice" value="true"/>
    <property name="growSkipInterval" value="0"/>
    <property name="linguist" value="flatLinguist"/>
    <property name="checkStateOrder" value="false"/>
    <property name="keepAllTokens" value="true"/>

    <property name="acousticLookaheadFrames" value="${acousticLookahead}"/>
    <property name="relativeBeamWidth" value="${relativeBeamWidth}"/>
  </component>

  <component name="activeListManager"
             type="edu.cmu.sphinx.decoder.search.SimpleActiveListManager">
    <propertylist name="activeListFactories">
      <item>standardActiveListFactory</item>
      <item>wordActiveListFactory</item>
      <item>wordActiveListFactory</item>
      <item>standardActiveListFactory</item>
      <item>standardActiveListFactory</item>
      <item>standardActiveListFactory</item>
      <item>standardActiveListFactory</item>
    </propertylist>
  </component>

  <component name="standardActiveListFactory"
             type="edu.cmu.sphinx.decoder.search.PartitionActiveListFactory">
    <property name="absoluteBeamWidth" value="${absoluteBeamWidth}"/>
    <property name="relativeBeamWidth" value="${relativeBeamWidth}"/>
  </component>

  <component name="wordActiveListFactory"
             type="edu.cmu.sphinx.decoder.search.PartitionActiveListFactory">
    <property name="absoluteBeamWidth" value="${absoluteWordBeamWidth}"/>
    <property name="relativeBeamWidth" value="${relativeWordBeamWidth}"/>
  </component>



  <component name="flatLinguist"
             type="edu.cmu.sphinx.linguist.flat.FlatLinguist">
    <property name="logMath" value="logMath"/>
    <property name="grammar" value="srgsGrammar"/>
    <property name="acousticModel" value="speechdata"/>
    <property name="phoneLoopAcousticModel" value="speechdata"/>
    <property name="wordInsertionProbability"
              value="${wordInsertionProbability}"/>
    <property name="silenceInsertionProbability"
              value="${silenceInsertionProbability}"/>
    <property name="languageWeight" value="${languageWeight}"/>
    <property name="unitManager" value="unitManager"/>
    <property name="addOutOfGrammarBranch" value="true"/>
    <property name="outOfGrammarProbability"
              value="${outOfGrammarProbability}"/>
  </component>



  <!-- ******************************************************** -->
  <!-- The Grammar  configuration                               -->
  <!-- ******************************************************** -->

  <component name="srgsGrammar" type="org.jvoicexml.jsapi2.recognition.sphinx4.SRGSGrammarContainer">
        <property name="dictionary" value="dictionary"/>
        <property name="logMath" value="logMath"/>
  </component>
  
  <component name="dictionary" 
             type="edu.cmu.sphinx.linguist.dictionary.FastDictionary">
    <property name="dictionaryPath" value="resource:/speechdata2014.cd_cont_2000/dict/speechdata2014.dic"/>
    <property name="fillerPath" value="resource:/speechdata2014.cd_cont_2000/dict/speechdata2014.filler"/>
    <property name="unitManager" value="unitManager"/>
  </component>

  <component name="speechdata"
             type="edu.cmu.sphinx.linguist.acoustic.tiedstate.TiedStateAcousticModel">
    <property name="loader" value="acousticModelLoader"/>
    <property name="unitManager" value="unitManager"/>
  </component>

  <component name="acousticModelLoader" type="edu.cmu.sphinx.linguist.acoustic.tiedstate.Sphinx3Loader">
    <property name="unitManager" value="unitManager"/>
    <property name="location" value="resource:/speechdata2014.cd_cont_2000"/>
  </component>

  <component name="trivialPruner"
             type="edu.cmu.sphinx.decoder.pruner.SimplePruner">
  </component>

  <component name="threadedScorer"
             type="edu.cmu.sphinx.decoder.scorer.ThreadedAcousticScorer">
    <property name="frontend" value="${frontend}"/>
  </component>

  <component name="unitManager" 
             type="edu.cmu.sphinx.linguist.acoustic.UnitManager"/>

  <component name="mfcFrontEnd"
             type="edu.cmu.sphinx.frontend.FrontEnd">
    <propertylist name="pipeline">
      <item>sphinxInputDataProcessor</item>
      <item>dataBlocker </item>
      <item>speechClassifier </item>
      <item>speechMarker </item>
      <item>nonSpeechDataFilter </item>
      <item>preemphasizer</item>
      <item>windower</item>
      <item>fft</item>
      <item>autoCepstrum</item>
      <item>liveCMN</item>
      <item>featureExtraction</item>
      <item>featureTransform</item>
    </propertylist>
  </component>    

    <component name="sphinxInputDataProcessor"
               type="org.jvoicexml.jsapi2.recognition.sphinx4.SphinxInputDataProcessor">
        <property name="samplingRate" value="16000"/>
        <property name="sampleSizeInBits" value="16"/>
        <property name="channels" value="1"/>
        <property name="signed" value="false"/>
        <property name="bigEndian" value="false"/>
    </component>

  <component name="streamDataSource"
             type="edu.cmu.sphinx.frontend.util.StreamDataSource">
    <property name="sampleRate" value="8000"/>
    <property name="bitsPerSample" value="16"/>
    <property name="bigEndianData" value="false"/>
    <property name="signedData" value="true"/>
    <property name="bytesPerRead" value="160"/>
  </component>
  
  <component name="microphone"
             type="edu.cmu.sphinx.frontend.util.Microphone">
    <property name="closeBetweenUtterances" value="false"/>
    <!--property name="bigEndian" value="false"/-->
  </component>
  
  
  <component name="dataBlocker" type="edu.cmu.sphinx.frontend.DataBlocker">
    <!--<property name="blockSizeMs" value="10"/>-->
  </component>

  <component name="speechClassifier"
             type="edu.cmu.sphinx.frontend.endpoint.SpeechClassifier">
    <property name="threshold" value="${speechClassThreshold}" />
  </component>

  <component name="nonSpeechDataFilter"
             type="edu.cmu.sphinx.frontend.endpoint.NonSpeechDataFilter"/>

  <component name="speechMarker"
             type="edu.cmu.sphinx.frontend.endpoint.SpeechMarker" >
    <property name="speechTrailer" value="50"/>
  </component>

  <component name="preemphasizer"
             type="edu.cmu.sphinx.frontend.filter.Preemphasizer">
  </component>

  <component name="dither"
             type="edu.cmu.sphinx.frontend.filter.Dither">
  </component>

  <component name="windower"
             type="edu.cmu.sphinx.frontend.window.RaisedCosineWindower">
  </component>

  <component name="fft"
             type="edu.cmu.sphinx.frontend.transform.DiscreteFourierTransform">
  </component>

  <component name="autoCepstrum"
	     type="edu.cmu.sphinx.frontend.AutoCepstrum">
    <property name="loader" value="acousticModelLoader"/>
  </component>

  <component name="liveCMN"
             type="edu.cmu.sphinx.frontend.feature.LiveCMN">
    <property name="cmnWindow" value="50"/>
    <property name="shiftWindow" value="25"/>
  </component>

  <component name="featureExtraction"
             type="edu.cmu.sphinx.frontend.feature.DeltasFeatureExtractor">
  </component>

  <component name="featureTransform"
             type="edu.cmu.sphinx.frontend.feature.FeatureTransform">
    <property name="loader" value="acousticModelLoader"/>
  </component>

  <!-- ************************************************** -->
  <!-- Instrumentation                                    -->
  <!-- ************************************************** -->

  <component name="accuracyTracker"
             type="edu.cmu.sphinx.instrumentation.BestPathAccuracyTracker">
    <property name="showRawResults" value="false"/>
    <property name="recognizer" value="${recognizer}"/>
    <property name="showAlignedResults" value="false"/>
  </component>

  <component name="memoryTracker"
             type="edu.cmu.sphinx.instrumentation.MemoryTracker">
    <property name="recognizer" value="${recognizer}"/>
  </component>

  <component name="speedTracker"
             type="edu.cmu.sphinx.instrumentation.SpeedTracker">
    <property name="showTimers" value="true"/>
    <property name="frontend" value="${frontend}"/>
    <property name="recognizer" value="${recognizer}"/>
  </component>

</config>